// Â©2019 Yuichiro Nakada
// clang -Os sgemm_ocl.c -o sgemm_ocl `pkg-config --libs --cflags OpenCL`
// clang -Os sgemm_ocl.c -o sgemm_ocl -framework opencl
// clang -Os sgemm_ocl.c -o sgemm_ocl -L/opt/amdgpu-pro/lib64/ -lOpenCL
// LD_LIBRARY_PATH=/opt/amdgpu-pro/lib64 ./sgemm_ocl
#include <stdio.h>
#include <math.h>
#include <sys/time.h>
#include "ocl.h"

static void cmp_results(int M, int N, const float *ref, const float *res, int ld)
{
	double maxErr = 0;
	double s2Err = 0;
	double s1Ref = 0;
	double s2Ref = 0;
	int maxI = 0;
	for (int m=0; m<M; ++m) {
		for (int n=0; n<N; ++n) {
			double refV = ref[m*ld+n];
			double resV = res[m*ld+n];
			double err  = resV - refV;
			if (maxErr < fabs(err)) {
				maxErr = fabs(err);
				maxI = m*ld+n;
			}
			s2Err += err*err;
			s1Ref += refV;
			s2Ref += refV*refV;
		}
	}
	double stdErr = sqrt(s2Err / (M*N));
	double stdRef = sqrt(s2Ref*(M*N) - s1Ref*s1Ref)/((M*N));
	printf("%.3e/%.3e=%.3e. %.3e at [%3d,%3d] %18.10e vs %18.10e %s\n",
		stdErr, stdRef, stdErr/stdRef,
		maxErr, maxI/ld, maxI%ld,
		(double)ref[maxI], (double)res[maxI],
		maxErr > stdRef*1e-5 ? "FAIL !!!" : (maxErr > stdRef*3e-5 || stdErr > stdRef*1e-6 ? "Sucks !" : "")
	);
}

char kernel_code[] = OCLSTRINGIFY(

// This file is part of OpenCV project.
// It is subject to the license terms in the LICENSE file found in the top-level directory
// of this distribution and at http://opencv.org/license.html.

// Copyright (C) 2014, Itseez, Inc., all rights reserved.
// Third party copyrights are property of their respective owners.

#ifdef DOUBLE_SUPPORT
#ifdef cl_amd_fp64
#pragma OPENCL EXTENSION cl_amd_fp64:enable
#elif defined (cl_khr_fp64)
#pragma OPENCL EXTENSION cl_khr_fp64:enable
#endif
#endif

#define TSIZE  (int)sizeof(T)
#define WTSIZE (int)sizeof(WT)

#define IND_A mad24(y, A_step, A_offset)
#define IND_B mad24(x, WTSIZE, B_offset)
#define STEP_B B_step / WTSIZE

#define LOCAL_SIZE_ODD (LOCAL_SIZE + 1)

#if cn==2
#if kercn==2
#define MUL(a, b)\
    {\
    sum.x += fma(a.x, b.x, - a.y * b.y);\
    sum.y += fma(a.x, b.y, a.y * b.x);\
    }
#else
#define MUL(a, b)\
    {\
    sum.x += fma(a.x, b.x, - a.y * b.y);\
    sum.y += fma(a.x, b.y, a.y * b.x);\
    sum.z += fma(a.x, b.z, - a.y * b.w);\
    sum.w += fma(a.x, b.w, a.y * b.z);\
    }
#endif
#else
#define MUL(a, b) sum = fma(a, b, sum);
#endif

__kernel void gemm(__global const uchar * A_ptr, int A_step, int A_offset,
                   __global const uchar * B_ptr, int B_step, int B_offset,
                   __global uchar * D_ptr, int D_step, int D_offset, int D_rows, int D_cols,
                   int n, T1 alpha, T1 beta)
{
    int x = get_global_id(0);
    int y = get_global_id(1);

    int lidx = get_local_id(0);
    int lidy = get_local_id(1);

    __global const T* A = (__global const T*)(A_ptr + IND_A);
    __global const WT* B = (__global const WT*)(B_ptr + IND_B);

    WT sum = (WT)(0);

#if LOCAL_SIZE == 1

    if (x < D_cols && y < D_rows)
    {
        for (int i = 0; i < n; ++i)
            MUL(A[i], B[i*STEP_B]);
#else

    __local T  a_local[LOCAL_SIZE_ODD*LOCAL_SIZE];
    __local WT b_local[LOCAL_SIZE_ODD*LOCAL_SIZE];

    int reps;
#if NO_MULT
    reps = (n + LOCAL_SIZE-1)/LOCAL_SIZE;
#else
    reps = n/LOCAL_SIZE;
#endif

    for (int p = 0; p < reps; ++p)
    {
        if (p * LOCAL_SIZE + lidx < n && y < D_rows)
            a_local[mad24(lidy, LOCAL_SIZE_ODD, lidx)] = A[mad24(p, LOCAL_SIZE, lidx)];
        if (p * LOCAL_SIZE + lidy < n && x < D_cols)
            b_local[mad24(lidy, LOCAL_SIZE_ODD, lidx)] = B[mad24(p, LOCAL_SIZE, lidy)*STEP_B];

        barrier(CLK_LOCAL_MEM_FENCE);

        if (x < D_cols && y < D_rows)
        {
#if NO_MULT
            int ie = min(LOCAL_SIZE, n - p * LOCAL_SIZE);
            for (int i = 0; i < ie; ++i)
#else
            for (int i = 0; i < LOCAL_SIZE; ++i)
#endif
                MUL(a_local[mad24(lidy, LOCAL_SIZE_ODD, i)], b_local[mad24(i, LOCAL_SIZE_ODD, lidx)]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }

    if (x < D_cols && y < D_rows)
    {
#endif
        __global WT* D = (__global WT*)(D_ptr + mad24(y, D_step, mad24(x, WTSIZE, D_offset)));
#if HAVE_C
        D[0] = mad(alpha, sum, D[0]*beta);
#else
        D[0] = alpha * sum;
#endif
    }
}

);

// Size of the matrices - K, M, N (squared)
//#define SIZE 4096
#define SIZE 1024
// Threadblock sizes
//#define TS 32
#define TS 16

int M = SIZE;
int N = SIZE;
int K = SIZE;
float A[SIZE*SIZE], B[SIZE*SIZE], C[SIZE*SIZE], Z[SIZE*SIZE];
args_t args[] = {
	{ CL_MEM_READ_ONLY,  sizeof(float)*SIZE*SIZE, 0, A, OCL_INPUT },
	{ 0, sizeof(int), 0, &M, 0 },
	{ 0, sizeof(int), 0, &M_off, 0 },
	{ CL_MEM_READ_ONLY,  sizeof(float)*SIZE*SIZE, 0, B, OCL_INPUT },
	{ 0, sizeof(int), 0, &N, 0 },
	{ 0, sizeof(int), 0, &N_off, 0 },
	{ 0, sizeof(int), 0, &K, 0 },
	{ CL_MEM_READ_WRITE, sizeof(float)*SIZE*SIZE, 0, C, OCL_OUTPUT },
	{ 0, 0, 0, 0, 0 },
};
ocl_t kernel[] = {
	{ "gemm", 0, 2,{/*M*/SIZE/WPTM,/*N*/SIZE/WPTN,},{TSM/WPTM,TSN/WPTN}, args },
};
int ksz = sizeof(kernel)/sizeof(kernel[0]);

int main()
{
	for (int i=0; i<M*K; i++) { A[i] = 3.6*i + i*i + 3.1; }
	for (int i=0; i<K*N; i++) { B[i] = 1.2*i + 0.01*i*i + 13.9; }
	for (int i=0; i<M*N; i++) { C[i] = 0.0; }
	for (int i=0; i<M*N; i++) { Z[i] = 0.0; }

	oclSetup(0, 0);
	oclKernel(kernel, ksz, "-cl-denorms-are-zero -cl-finite-math-only -cl-fast-relaxed-math -Werror", kernel_code);
	oclKernelArgs(kernel, ksz);

	struct timeval tv;
	struct timezone dummy;
	gettimeofday(&tv, &dummy);
	double starttime = (double)tv.tv_sec + 1.0e-6*((double)tv.tv_usec);

	oclKernelArgsWrite(args);
	oclRun(&kernel[0]);
	oclKernelArgsRead(args);

	gettimeofday(&tv, &dummy);
	double endtime = (double)tv.tv_sec + 1.0e-6*((double)tv.tv_usec);
	double runtime = (endtime - starttime) / (double)/*NUM_RUNS*/1;
	double gflop = ((long)K * (long)M * (long)N * 2) / (1000*1000*1000);
	printf(">>> Done: took %.3lf seconds per run, %.1lf GFLOPS\n", runtime, gflop/runtime);

	oclReleaseKernel(kernel, ksz);
	oclFinish();

	int lda = SIZE;
	int ldb = SIZE;
	int ldc = SIZE;
	float alpha = 1;
	float beta = 0;
	for (int m=0; m<M; m++) {
		for (int n=0; n<N; n++) {
			register float sum = 0.0;
			// Row Major
			/*for (int k=0; k<K; k++) {
				sum += A[k + m * lda] * B[n + k * ldb];
			}
			Z[n + m * ldc] = alpha * sum + beta * Z[n + m * ldc];*/
			// Column Major
			/*for (int k=0; k<K; k++) {
				sum += A[m + k * lda] * B[k + n * ldb];
			}
			Z[m + n * ldc] = alpha * sum + beta * Z[m + n * ldc];*/
			// CNT
			for (int k=0; k<K; k++) {
				sum += A[m + k * lda] * B[n + k * ldb];
			}
			Z[m + n * ldc] = alpha * sum + beta * Z[m + n * ldc];
		}
	}
	cmp_results(M, N, Z, C, ldc);
}
